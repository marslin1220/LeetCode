//: [Previous](@previous)

// 91. Decode Ways
// Q: https://leetcode.com/problems/decode-ways/

import XCTest

class Solution {
    func numDecodings(_ s: String) -> Int {
        var rearCount = 2
        var last1 = 1
        var last2 = 1

        while s.count - rearCount >= 0 {
            let last1Index = s.index(s.endIndex, offsetBy: -rearCount)
            let last2Index = s.index(s.endIndex, offsetBy: 1 - rearCount)
            let last1String = String(s[last1Index])
            let last2String = String(s[last2Index])

            if Int(last1String)! * 10 + Int(last2String)! <= 26 {
                let temp = last1
                last1 += last2
                last2 = temp
            } else {
                last2 = last1
            }

            rearCount += 1
        }

        return last1
    }
}

class MyTests: XCTestCase {
    func test1() {
        XCTAssertEqual(Solution().numDecodings("226"), 3)
    }

    func test2() {
        XCTAssertEqual(Solution().numDecodings("12"), 2)
    }

    func test3() {
        XCTAssertEqual(Solution().numDecodings
    }
}

TestRunner().runTests(testClass: MyTests.self)

//: [Next](@next)
